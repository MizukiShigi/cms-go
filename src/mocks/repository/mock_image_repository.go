// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/image_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repository/image_repository.go -destination=mocks/repository/mock_image_repository.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/MizukiShigi/cms-go/internal/domain/entity"
	mock "go.uber.org/mock/gomock"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *mock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *mock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImageRepository) Create(ctx context.Context, image *entity.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExpectation mocks the Create method expectation.
func (mr *MockImageRepositoryMockRecorder) Create(ctx, image interface{}) *mock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageRepository)(nil).Create), ctx, image)
}
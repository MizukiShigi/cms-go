// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/storage_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/service/storage_service.go -destination=mocks/service/mock_storage_service.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"

	service "github.com/MizukiShigi/cms-go/internal/domain/service"
	valueobject "github.com/MizukiShigi/cms-go/internal/domain/valueobject"
	mock "go.uber.org/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *mock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *mock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// UploadImage mocks base method.
func (m *MockStorageService) UploadImage(ctx context.Context, bucketName string, fileName valueobject.ImageFilename, data io.Reader) (service.UploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, bucketName, fileName, data)
	ret0, _ := ret[0].(service.UploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImageExpectation mocks the UploadImage method expectation.
func (mr *MockStorageServiceMockRecorder) UploadImage(ctx, bucketName, fileName, data interface{}) *mock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockStorageService)(nil).UploadImage), ctx, bucketName, fileName, data)
}
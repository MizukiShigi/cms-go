---
description: 
globs: 
alwaysApply: false
---
---
description: Go CMS project rules
globs: 
alwaysApply: true
---

# Go CMS プロジェクト Cursor Rules

## プロジェクトの設計思想
このプロジェクトはGo言語でClean Architectureを採用したCMSです。
**最重要原則**: 可読性、保守性、テスト可能性を重視し、ビジネスロジックを外部依存から分離する。

## アーキテクチャ構造
```
src/internal/domain/     → ビジネスロジック（外部依存禁止）
src/internal/usecase/    → アプリケーションロジック
src/internal/presentation/ → HTTP処理・コントローラー
src/infrastructure/      → 外部システム実装
```

**依存関係ルール**: 内側のレイヤーは外側を知らない。すべての依存は内向き。

## コーディング原則

### Go言語スタイル
- エラーは必ず処理、無視禁止
- context.Context を第一引数で渡す
- インターフェースで依存性注入
- 意味のある変数名、短縮形は避ける
- PascalCase（エクスポート）、camelCase（プライベート）

### エラーハンドリング戦略
- ドメイン層：ドメインエラー（MyError）を返す
- ユースケース層：エラーをラップして適切なメッセージを追加
- プレゼンテーション層：ドメインエラーをHTTPステータスに変換
- エラーログは境界で出力、重複ログ避ける

## 設計パターン

### バリューオブジェクト
- プリミティブ型の濫用を防ぐ
- コンストラクタでバリデーション
- String()メソッド必須
- イミュータブル設計
- ID型、列挙型、制約付き文字列に使用

### リポジトリパターン
- ドメイン層でインターフェース定義
- インフラ層で実装
- SQLBoilerを使用、生SQLは避ける
- トランザクション境界はユースケース層

### ユースケース設計
- 1つのビジネス操作につき1つのユースケース
- Input/Output構造体で明確なインターフェース
- 複雑なロジックはドメインサービスに委譲
- 副作用（DB更新、外部API呼び出し）の責任を負う

## プロジェクト固有判断

### 画像アップロード
- GCSを使用、公開URLと保存ファイル名の両方を返却
- ファイル名は衝突回避のためUUID+タイムスタンプ
- バリデーション：サイズ制限、画像形式チェック

### ソート順管理
- クライアント主導で管理
- サーバーは範囲チェック（0-999）のみ
- 重複は許可、正規化は別機能で提供

### 認証・認可
- JWT使用
- ミドルウェアでトークン検証
- UserIDをコンテキストに設定

### API設計
- RESTful原則
- 一貫したJSONレスポンス形式
- go-playground/validatorでバリデーション
- エラーレスポンスは統一フォーマット

## ファイル・ネーミング規則

### ディレクトリ構成
- entity/, valueobject/, repository/, service/ で分割
- 1ファイル1型の原則
- テストファイルは同一パッケージに配置

### ファイル命名
- エンティティ: `user.go`
- バリューオブジェクト: `email.go`, `user_id.go`
- リポジトリ: `user_repository.go`
- ユースケース: `create_user.go`（動詞_名詞）
- コントローラー: `user_controller.go`

## 開発方針

### テスト戦略
- ドメイン・ユースケース層の高いカバレッジを重視
- テーブル駆動テスト使用
- モックはインターフェース境界で使用
- 統合テストより単体テストを優先

### ログ・監視
- 機密情報（パスワード、トークン）のログ出力禁止
- ERROR（要対応）、WARN（注意）、INFO（重要処理）、DEBUG（開発時）
- 外部API呼び出し、DB操作の開始・終了をログ出力

### セキュリティ
- 全入力値のバリデーション
- SQLインジェクション対策（プリペアドステートメント）
- 機密データは環境変数管理
- HTTPS必須

## 判断基準

### 複雑性への対応
- 迷った時はシンプルな解決策を選ぶ
- 過度な抽象化は避ける
- ビジネスロジックはドメイン層に集約
- 技術的関心事は外部層で処理

### 一貫性の優先
- プロジェクト内で統一されたパターンを使用
- 既存コードのスタイルに合わせる
- 新しいパターン導入時はチーム合意を得る

### 保守性重視
- 将来の変更を考慮した設計
- 密結合を避け、疎結合を心がける
- 副作用を明確に分離
- 可読性を最優先

---
**AI支援の期待**: このルールに基づいて、プロジェクトの意図を理解し、一貫性のあるコード生成とアーキテクチャ判断を行ってください。

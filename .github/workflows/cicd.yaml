name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths: ["src/**"] # src/配下の変更のみでトリガー
  pull_request:
    branches: [main]
    paths: ["src/**"]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast1
  REPOSITORY: ${{ secrets.GCP_PROJECT_ID }}-repo
  SERVICE_NAME: ${{ secrets.GCP_PROJECT_ID }}-api
  IMAGE_NAME: cms-api

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: cms_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.0"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('src/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./src
        run: go mod download

      - name: Verify dependencies
        working-directory: ./src
        run: go mod verify

      - name: Run go vet
        working-directory: ./src
        run: go vet ./...

      - name: Run go fmt check
        working-directory: ./src
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "gofmt found unformatted files:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests with coverage
        run: |
          make test

  need-deploy:
      runs-on: ubuntu-latest
      outputs:
        should-deploy: ${{ steps.changes.outputs.should-deploy }}
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 2
            
        - name: Check if deployment is needed
          id: changes
          run: |
            # デプロイ対象のファイル変更かチェック
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            NON_TEST_CHANGES=$(echo "$CHANGED_FILES" | grep -v -E '(_test\.go|\.md|^docs/|^\.github/)' || true)
            
            if [ -z "$NON_TEST_CHANGES" ]; then
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "Only test files or docs changed, skipping deployment"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "Application code changed, deployment needed"
            fi

  deploy:
    runs-on: ubuntu-latest
    if: needs.need-deploy.outputs.should-deploy == 'true' && github.event_name == 'push'

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and tag Docker image
        run: |
          docker build --platform linux/amd64 --target prd -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ./src

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          flags: "--update-env-vars=IMAGE_TAG=${{ github.sha }}"
